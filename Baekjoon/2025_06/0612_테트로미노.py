# BOJ 14500 
import sys
input = sys.stdin.readline

N, M = map(int, input().split())
board = [list(map(int, input().split())) for _ in range(N)]

tetrominoes = [
    # ㅡ, ㅣ
    [(0,0),(0,1),(0,2),(0,3)],
    [(0,0),(1,0),(2,0),(3,0)],
    # ㅁ
    [(0,0),(0,1),(1,0),(1,1)],
    # ㄴ자 8가지
    [(0,0),(1,0),(2,0),(2,1)],
    [(0,1),(1,1),(2,1),(2,0)],
    [(0,0),(0,1),(1,0),(2,0)],
    [(0,0),(0,1),(1,1),(2,1)],
    [(0,0),(0,1),(0,2),(1,0)],
    [(0,0),(0,1),(0,2),(1,2)],
    [(0,2),(1,0),(1,1),(1,2)],
    [(0,0),(1,0),(1,1),(1,2)],
    # z자 4가지
    [(0,0),(0,1),(1,1),(1,2)],
    [(0,1),(1,0),(1,1),(2,0)],
    [(0,1),(0,2),(1,0),(1,1)],
    [(0,0),(1,0),(1,1),(2,1)],
    # ㅗ자 4가지
    [(0,0),(0,1),(0,2),(1,1)],
    [(0,1),(1,0),(1,1),(2,1)],
    [(1,0),(1,1),(1,2),(0,1)],
    [(0,0),(1,0),(2,0),(1,1)],
]

max_sum = 0

for i in range(N):
    for j in range(M):
        for shape in tetrominoes:
            try:
                total = 0
                for dx, dy in shape:
                    nx = i + dx
                    ny = j + dy
                    total += board[nx][ny]
                max_sum = max(max_sum, total)
            except IndexError:
                continue

print(max_sum)
